//
//  SignInViewController.m
//  MySampleApp
//
//
// Copyright 2017 Amazon.com, Inc. or its affiliates (Amazon). All Rights Reserved.
//
// Code generated by AWS Mobile Hub. Amazon gives unlimited permission to 
// copy, distribute and modify it.
//
// Source code generated from template: aws-my-sample-app-ios-objc v0.15
//
//
#import <Foundation/Foundation.h>
#import "MainViewController.h"
#import "SignInViewController.h"
#import <AWSCore/AWSCore.h>
#import <AWSMobileHubHelper/AWSMobileHubHelper.h>
#import <AWSCognitoIdentityProvider/AWSCognitoIdentityProvider.h>
#import "UserPoolMFAViewController.h"
#import "UserPoolSignUpViewController.h"
#import "UserPoolForgotPasswordViewController.h"

static NSString *LOG_TAG;

@interface SignInViewController () <AWSCognitoIdentityInteractiveAuthenticationDelegate, AWSCognitoIdentityPasswordAuthentication, AWSCognitoUserPoolsSignInHandler>

@property (nonatomic, strong) id didSignInObserver;
@property (nonatomic, strong) AWSTaskCompletionSource<AWSCognitoIdentityPasswordAuthenticationDetails*>* passwordAuthenticationCompletion;
@property(nonatomic,strong) UserPoolMFAViewController* mfaViewController;

@end

@implementation SignInViewController

+ (void)initialize {
    [super initialize];
    LOG_TAG = NSStringFromClass(self);
}

#pragma mark - UIViewController

- (void)viewDidLoad {
    [super viewDidLoad];
    NSLog(@"%@: Sign-In Loading.", LOG_TAG);

    __weak SignInViewController *weakSelf = self;
    self.didSignInObserver =
        [[NSNotificationCenter defaultCenter]
            addObserverForName:AWSIdentityManagerDidSignInNotification
                        object:[AWSIdentityManager defaultIdentityManager]
                         queue:[NSOperationQueue mainQueue]
                    usingBlock:^(NSNotification * _Nonnull note) {
                                  [weakSelf.presentingViewController
                                      dismissViewControllerAnimated:YES
                                                         completion:nil];
                               }];
    [self.facebookButton removeFromSuperview];
    [self.googleButton removeFromSuperview];
    // CUSTOM UI SETUP
    [self.leftHorizontalBar removeFromSuperview];
    [self.rightHorizontalBar removeFromSuperview];
    [self.orSignInWithLabel removeFromSuperview];
        
    [self.customProviderButton addTarget:self
                                  action:@selector(handleCustomSignIn)
                        forControlEvents:UIControlEventTouchUpInside];
    [self.customCreateAccountButton addTarget:self
                                       action:@selector(handleUserPoolSignUp)
                             forControlEvents:UIControlEventTouchUpInside];
    [self.customForgotPasswordButton addTarget:self
                                        action:@selector(handleUserPoolForgotPassWord)
                              forControlEvents:UIControlEventTouchUpInside];

    [self.customProviderButton setImage:[UIImage imageNamed:@"LoginButton"]
                               forState:UIControlStateNormal];
}

- (void)dealloc {
    [[NSNotificationCenter defaultCenter] removeObserver:self.didSignInObserver];
}

#pragma mark - Utility Methods

- (void)handleLoginWithSignInProvider:(id<AWSSignInProvider>)signInProvider {
    [[AWSIdentityManager defaultIdentityManager]
        loginWithSignInProvider:signInProvider
              completionHandler:^(id result, NSError *error) {
                                    if (!error) {
                                        dispatch_async(dispatch_get_main_queue(), ^{
                                            [self.navigationController popToRootViewControllerAnimated:YES];
                                        });
                                    }
                                    NSLog(@"result = %@, error = %@", result, error);
                                }];
}

- (void)showErrorDialog:(NSString *)loginProviderName withError:(const NSError *)error {
    NSLog(@"%@: %@ failed to sign in w/ error: %@", LOG_TAG, loginProviderName, error);

    UIAlertController *alertController =
        [UIAlertController alertControllerWithTitle:NSLocalizedString(@"Sign-in Provider Sign-In Error",
                                                                      @"Sign-in error for sign-in failure.")
                                            message:NSLocalizedString(@"%@ failed to sign in w/ error: %@",
                                                                      @"Sign-in message structure for sign-in failure.")
                                     preferredStyle:UIAlertControllerStyleAlert];
    UIAlertAction *doneAction =
        [UIAlertAction actionWithTitle:NSLocalizedString(@"Cancel",
                                                         @"Label to cancel sign-in failure.")
                                 style:UIAlertActionStyleCancel
                                handler:nil];
    [alertController addAction:doneAction];

    [self presentViewController:alertController
                       animated:YES
                     completion:nil];
}

#pragma mark - IBActions

//set up password authentication ui to retrieve username and password from the user
-(id<AWSCognitoIdentityPasswordAuthentication>) startPasswordAuthentication {
    return self;
}

-(id<AWSCognitoIdentityMultiFactorAuthentication>) startMultiFactorAuthentication {
    
    UIStoryboard *storyboard = [UIStoryboard storyboardWithName:@"UserPools" bundle:nil];
    UserPoolMFAViewController *viewController = (UserPoolMFAViewController *)[storyboard instantiateViewControllerWithIdentifier:@"MFA"];
    dispatch_async(dispatch_get_main_queue(), ^{
        [self.navigationController pushViewController:viewController
                                                 animated:YES];
    });
    
    return viewController;
}


-(void) getPasswordAuthenticationDetails: (AWSCognitoIdentityPasswordAuthenticationInput *) authenticationInput  passwordAuthenticationCompletionSource: (AWSTaskCompletionSource<AWSCognitoIdentityPasswordAuthenticationDetails *> *) passwordAuthenticationCompletionSource {
    self.passwordAuthenticationCompletion = passwordAuthenticationCompletionSource;
    dispatch_async(dispatch_get_main_queue(), ^{
        if(!self.customUserIdField.text)
            self.customUserIdField.text = authenticationInput.lastKnownUsername;
    });
    
}

-(void) didCompletePasswordAuthenticationStepWithError:(NSError*) error {
    if(error){
        dispatch_async(dispatch_get_main_queue(), ^{
            
            [[[UIAlertView alloc] initWithTitle:error.userInfo[@"__type"]
                                        message:error.userInfo[@"message"]
                                       delegate:nil
                              cancelButtonTitle:nil
                              otherButtonTitles:@"Retry", nil] show];
        });
    }
}

- (void)handleCustomSignIn {
    [[AWSCognitoUserPoolsSignInProvider sharedInstance] setInteractiveAuthDelegate:self];
    [self handleLoginWithSignInProvider:[AWSCognitoUserPoolsSignInProvider sharedInstance]];
}

- (void)handleUserPoolSignInFlowStart {
    self.passwordAuthenticationCompletion.result = [[AWSCognitoIdentityPasswordAuthenticationDetails alloc] initWithUsername:self.customUserIdField.text password:self.customPasswordField.text];
}

- (void)handleUserPoolSignUp {
    UIStoryboard *storyboard = [UIStoryboard storyboardWithName:@"UserPools" bundle:nil];
    UIViewController *viewController = [storyboard instantiateViewControllerWithIdentifier:@"SignUp"];
    [self.navigationController pushViewController:viewController
                                         animated:YES];
}

- (void)handleUserPoolForgotPassWord {
    UIStoryboard *storyboard = [UIStoryboard storyboardWithName:@"UserPools" bundle:nil];
    UIViewController *viewController = [storyboard instantiateViewControllerWithIdentifier:@"ForgotPassword"];
    [self.navigationController pushViewController:viewController
                                         animated:YES];
}




@end
