//
//  NoSQLQueryResultViewController.m
//  MySampleApp
//
//
// Copyright 2017 Amazon.com, Inc. or its affiliates (Amazon). All Rights Reserved.
//
// Code generated by AWS Mobile Hub. Amazon gives unlimited permission to 
// copy, distribute and modify it.
//
// Source code generated from template: aws-my-sample-app-ios-objc v0.15
//
@import AWSCore;
#import "NoSQLQueryResultViewController.h"
#import "NoSQLModelHelpers.h"

@interface NoSQLQueryResultViewController()

@property (nonatomic, assign, getter=isLoading) BOOL loading;

@end

@implementation NoSQLQueryResultViewController

- (void)viewDidLoad {
    [super viewDidLoad];

    self.tableView.estimatedRowHeight = self.tableView.rowHeight;
    self.tableView.rowHeight = UITableViewAutomaticDimension;

    self.queryDescriptionLabel.text = self.queryDescription;
    self.title = self.queryType;
}

- (NSInteger)numberOfSectionsInTableView:(UITableView *)tableView {
    if ([self.results count] > 0) {
        return [self.results count];
    } else {
        return 1;
    }
}

- (NSInteger)tableView:(UITableView *)tableView numberOfRowsInSection:(NSInteger)section {
    if ([self.results count] > 0) {
        return [self.table.orderedAttributeKeys count];
    } else {
        return 1;
    }
}

- (NSString *)tableView:(UITableView *)tableView titleForHeaderInSection:(NSInteger)section {
    if ([self.results count] > 0) {
        return [@(section + 1) stringValue];
    } else {
        return @" ";
    }
}

- (void)tableView:(UITableView *)tableView didSelectRowAtIndexPath:(NSIndexPath *)indexPath {
    if ([self.results count] > 0) {
        [self showEditOptionsForIndexPath:indexPath];
    }
    [tableView deselectRowAtIndexPath:indexPath animated:NO];
}

- (UITableViewCell *)tableView:(UITableView *)tableView cellForRowAtIndexPath:(NSIndexPath *)indexPath {
    if ([self.results count] == 0) {
        UITableViewCell *cell = [tableView dequeueReusableCellWithIdentifier:@"NoSQLQueryNoResultCell" forIndexPath:indexPath];
        return cell;
    }

    NoSQLQueryResultCell *cell = [tableView dequeueReusableCellWithIdentifier:@"NoSQLQueryResultCell" forIndexPath:indexPath];

    AWSDynamoDBObjectModel<AWSDynamoDBModeling> *model = self.results[indexPath.section];
    NSDictionary *modelDictionary = [model dictionaryValue];
    NSString *attributeKey = [self.table tableAttributeName:self.table.orderedAttributeKeys[indexPath.row]];

    cell.attributeNameLabel.text = attributeKey;
    cell.attributeValueLabel.text = [NSString stringWithFormat:@"%@", modelDictionary[self.table.orderedAttributeKeys[indexPath.row]]];

    if (!self.isLoading
        && self.paginatedOutput.lastEvaluatedKey
        && indexPath.section == [self.results count] - 1) {
        [self loadMoreResults];
    }

    return cell;
}

#pragma mark - User action methods

- (void)loadMoreResults {
    self.loading = YES;
    [self.paginatedOutput loadNextPageWithCompletionHandler:^(NSError * _Nullable error) {
        if (error) {
            NSLog(@"Failed to load more results: %@", error);
        } else {
            dispatch_async(dispatch_get_main_queue(), ^{
                NSMutableArray *results = [NSMutableArray arrayWithArray:self.results];
                [results addObjectsFromArray:self.paginatedOutput.items];
                self.results = results;

                [self.tableView reloadData];

                self.loading = NO;
            });
        }
    }];
}

- (void)showEditOptionsForIndexPath:(NSIndexPath *)indexPath {
    UIAlertController *alartController = [UIAlertController alertControllerWithTitle:nil
                                                                             message:nil
                                                                      preferredStyle:UIAlertControllerStyleActionSheet];
    UIAlertAction *updateAction = [UIAlertAction actionWithTitle:@"Update"
                                                           style:UIAlertActionStyleDefault
                                                         handler:^(UIAlertAction * _Nonnull action) {
                                                             [self showUpdateConfirmationForIndexPath:indexPath];
                                                         }];
    UIAlertAction *deleteAction = [UIAlertAction actionWithTitle:@"Delete"
                                                           style:UIAlertActionStyleDestructive
                                                         handler:^(UIAlertAction * _Nonnull action) {
                                                             [self showDeleteConfirmationForIndexPath:indexPath];
                                                         }];
    UIAlertAction *cancelAction = [UIAlertAction actionWithTitle:@"Cancel"
                                                           style:UIAlertActionStyleCancel
                                                         handler:nil];

    [alartController addAction:updateAction];
    [alartController addAction:deleteAction];
    [alartController addAction:cancelAction];

    [self presentViewController:alartController
                       animated:YES
                     completion:nil];
}

- (void)showUpdateConfirmationForIndexPath:(NSIndexPath *)indexPath {
    UIAlertController *alartController = [UIAlertController alertControllerWithTitle:nil
                                                                             message:@"Do you want to update your item?"
                                                                      preferredStyle:UIAlertControllerStyleActionSheet];
    UIAlertAction *proceedAction = [UIAlertAction actionWithTitle:@"Proceed"
                                                            style:UIAlertActionStyleDefault
                                                          handler:^(UIAlertAction * _Nonnull action) {
                                                              [self updateItemForIndexPath:indexPath];
                                                          }];
    UIAlertAction *cancelAction = [UIAlertAction actionWithTitle:@"Cancel"
                                                           style:UIAlertActionStyleCancel
                                                         handler:nil];

    [alartController addAction:proceedAction];
    [alartController addAction:cancelAction];

    [self presentViewController:alartController
                       animated:YES
                     completion:nil];
}

- (void)updateItemForIndexPath:(NSIndexPath *)indexPath {
    AWSDynamoDBObjectModel<AWSDynamoDBModeling> *item = [self.results objectAtIndex:indexPath.section];
    [self.table updateItem:item
         completionHandler:^(NSError * _Nullable error) {
             if (error) {
                 NSString *errorMessage = nil;
                 if (error.domain == AWSServiceErrorDomain && error.code == AWSServiceErrorAccessDeniedException) {
                     errorMessage = @"Access Denied. You are not allowed to update this item.";
                 } else {
                     errorMessage = [NSString stringWithFormat:@"Error Occurred: %@", error.localizedDescription];
                 }
                 [self showAlertWithTitle:@"Error" message:errorMessage];
             }
             if (!self.paginatedOutput) {
                 dispatch_async(dispatch_get_main_queue(), ^{
                     [self.tableView scrollToRowAtIndexPath:[NSIndexPath indexPathForItem:0 inSection:0]
                                           atScrollPosition:UITableViewScrollPositionTop
                                                   animated:NO];
                     self.results = @[item];
                     [self.tableView reloadData];
                 });
             } else {
                 [self.paginatedOutput reloadWithCompletionHandler:^(NSError * _Nullable error) {
                     dispatch_async(dispatch_get_main_queue(), ^{
                         [self.tableView scrollToRowAtIndexPath:[NSIndexPath indexPathForItem:0 inSection:0]
                                               atScrollPosition:UITableViewScrollPositionTop
                                                       animated:NO];
                         self.results = self.paginatedOutput.items;
                         [self.tableView reloadData];
                     });
                 }];
             }
         }];
}

- (void)showDeleteConfirmationForIndexPath:(NSIndexPath *)indexPath {
    UIAlertController *alartController = [UIAlertController alertControllerWithTitle:nil
                                                                             message:@"Do you want to delete your item?"
                                                                      preferredStyle:UIAlertControllerStyleActionSheet];
    UIAlertAction *proceedAction = [UIAlertAction actionWithTitle:@"Proceed"
                                                            style:UIAlertActionStyleDestructive
                                                          handler:^(UIAlertAction * _Nonnull action) {
                                                              [self removeItemForIndexPath:indexPath];
                                                          }];
    UIAlertAction *cancelAction = [UIAlertAction actionWithTitle:@"Cancel"
                                                           style:UIAlertActionStyleCancel
                                                         handler:nil];

    [alartController addAction:proceedAction];
    [alartController addAction:cancelAction];

    [self presentViewController:alartController
                       animated:YES
                     completion:nil];
}

- (void)removeItemForIndexPath:(NSIndexPath *)indexPath {
    [self.table removeItem:[self.results objectAtIndex:indexPath.section]
         completionHandler:^(NSError * _Nullable error) {
             if (error) {
                 NSString *errorMessage = nil;
                 if (error.domain == AWSServiceErrorDomain && error.code == AWSServiceErrorAccessDeniedException) {
                     errorMessage = @"Access Denied. You are not allowed to delete this item.";
                 } else {
                     errorMessage = [NSString stringWithFormat:@"Error Occurred: %@", error.localizedDescription];
                 }
                 [self showAlertWithTitle:@"Error" message:errorMessage];
             }
             if (!self.paginatedOutput) {
                 dispatch_async(dispatch_get_main_queue(), ^{
                     [self.tableView scrollToRowAtIndexPath:[NSIndexPath indexPathForItem:0 inSection:0]
                                           atScrollPosition:UITableViewScrollPositionTop
                                                   animated:NO];
                     self.results = @[];
                     [self.tableView reloadData];
                 });
             } else {
                 [self.paginatedOutput reloadWithCompletionHandler:^(NSError * _Nullable error) {
                     dispatch_async(dispatch_get_main_queue(), ^{
                         [self.tableView scrollToRowAtIndexPath:[NSIndexPath indexPathForItem:0 inSection:0]
                                               atScrollPosition:UITableViewScrollPositionTop
                                                       animated:NO];
                         self.results = self.paginatedOutput.items;
                         [self.tableView reloadData];
                     });
                 }];
             }
         }];
}

#pragma mark - Utility methods

- (void)showAlertWithTitle:(NSString *)title
                   message:(NSString *)message {
    UIAlertController *alertController =
    [UIAlertController alertControllerWithTitle:title
                                        message:message
                                 preferredStyle:UIAlertControllerStyleAlert];
    UIAlertAction *cancelAction =
    [UIAlertAction actionWithTitle:@"OK"
                             style:UIAlertActionStyleDefault
                           handler:nil];
    [alertController addAction:cancelAction];
    
    [self presentViewController:alertController
                       animated:YES
                     completion:nil];
}

@end

@implementation NoSQLQueryResultCell

@end
