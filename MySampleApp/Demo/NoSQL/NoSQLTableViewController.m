//
//  NoSQLTableViewController.m
//  MySampleApp
//
//
// Copyright 2017 Amazon.com, Inc. or its affiliates (Amazon). All Rights Reserved.
//
// Code generated by AWS Mobile Hub. Amazon gives unlimited permission to 
// copy, distribute and modify it.
//
// Source code generated from template: aws-my-sample-app-ios-objc v0.15
//
#import "NoSQLTableViewController.h"
#import "NoSQLModelHelpers.h"
#import "NoSQLQueryResultViewController.h"

@interface NoSQLTableViewController()

@property (nonatomic, strong) NSArray<NSString *> *sectionTitles;

@end

@implementation NoSQLTableViewController

- (void)viewDidLoad {
    [super viewDidLoad];

    self.title = self.table.tableDisplayName;
    
    // Activity indicator for displaying activity in progress
    self.activityIndicator.center = self.view.center;
    [self.view addSubview:self.activityIndicator];

    self.tableView.estimatedRowHeight = self.tableView.rowHeight;
    self.tableView.rowHeight = UITableViewAutomaticDimension;

    NSMutableArray<NSString *> *sectionTitles = [NSMutableArray new];

    [sectionTitles addObject:@"Get"];

    for (Index *secondaryIndex in self.table.indexes) {
        if (!secondaryIndex.indexName) {
            [sectionTitles addObject:@"Primary index queries"];
        } else {
            [sectionTitles addObject:[NSString stringWithFormat:@"Secondary index queries (%@)", secondaryIndex.indexName]];
        }
    }

    [sectionTitles addObject:@"Scan"];

    self.sectionTitles = [NSArray arrayWithArray:sectionTitles];
}

- (void)viewWillAppear:(BOOL)animated {
    [super viewWillAppear:animated];
    self.navigationController.toolbarHidden = NO;
}

- (void)viewWillDisappear:(BOOL)animated {
    [super viewWillDisappear:animated];
    self.navigationController.toolbarHidden = YES;
}

#pragma mark - Table view data source

- (NSInteger)numberOfSectionsInTableView:(UITableView *)tableView {
    return [self.sectionTitles count];
}

- (NSInteger)tableView:(UITableView *)tableView numberOfRowsInSection:(NSInteger)section {
    // Get item
    if (section == 0) {
        return 1;
    }

    // Queries
    if (section >= 1
        && section < [self.table.indexes count] + 1) {
        Index *index = self.table.indexes[section - 1];
        return [[index supportedOperations] count];
    }

    // Scan
    if ([[self.table class] instancesRespondToSelector:@selector(scanWithFilterDescription)]) {
        return 2;
    }
    return 1;
}

- (NSString *)tableView:(UITableView *)tableView titleForHeaderInSection:(NSInteger)section {
    return self.sectionTitles[section];
}

- (void)tableView:(UITableView *)tableView willDisplayHeaderView:(UIView *)view forSection:(NSInteger)section {
    if([view isKindOfClass:[UITableViewHeaderFooterView class]]){
        UITableViewHeaderFooterView *headerFooterView = (UITableViewHeaderFooterView *)view;
        headerFooterView.textLabel.text = self.sectionTitles[section];
    }
}

- (UITableViewCell *)tableView:(UITableView *)tableView cellForRowAtIndexPath:(NSIndexPath *)indexPath {
    NoSQLTableCell *cell = [tableView dequeueReusableCellWithIdentifier:@"NoSQLTableCell" forIndexPath:indexPath];

    // Get item
    if (indexPath.section == 0) {
        cell.queryType = GetItem;
        cell.queryTypeLabel.text = @"Get Item";
        cell.queryDescriptionLabel.text = [self.table getItemDescription];
        return cell;
    }

    // Queries
    if (indexPath.section >= 1
        && indexPath.section < [self.table.indexes count] + 1) {
        Index *index = self.table.indexes[indexPath.section - 1];
        cell.queryType = index.supportedOperations[indexPath.row];

        if ([cell.queryType isEqualToString:QueryWithPartitionKey]) {
            cell.queryTypeLabel.text = @"Query by Partition Key";
            cell.queryDescriptionLabel.text = [index queryWithPartitionKeyDescription];
            return cell;
        }
        if ([cell.queryType isEqualToString:QueryWithPartitionKeyAndFilter]) {
            cell.queryTypeLabel.text = @"Query by Partition Key and Filter";
            cell.queryDescriptionLabel.text = [index queryWithPartitionKeyAndFilterDescription];
            return cell;
        }
        if ([cell.queryType isEqualToString:QueryWithPartitionKeyAndSortKey]) {
            cell.queryTypeLabel.text = @"Query by Partition Key and Sort Condition";
            cell.queryDescriptionLabel.text = [index queryWithPartitionKeyAndSortKeyDescription];
            return cell;
        }
        if ([cell.queryType isEqualToString:QueryWithPartitionKeyAndSortKeyAndFilter]) {
            cell.queryTypeLabel.text = @"Query by Partition Key, Sort Condition, and Filter";
            cell.queryDescriptionLabel.text = [index queryWithPartitionKeyAndSortKeyAndFilterDescription];
            return cell;
        }
    }

    // Scan
    if (indexPath.row == 0) {
        cell.queryType = Scan;
        cell.queryTypeLabel.text = @"Scan";
        cell.queryDescriptionLabel.text = [self.table scanDescription];
    } else if (indexPath.row == 1) {
        cell.queryType = ScanWithFilter;
        cell.queryTypeLabel.text = @"Scan with Filter";
        cell.queryDescriptionLabel.text = [self.table scanWithFilterDescription];
    }
    return cell;
}

- (void)tableView:(UITableView *)tableView didSelectRowAtIndexPath:(NSIndexPath *)indexPath {
    static NSString *showQueryResultSeque = @"NoSQLShowQueryResultSegue";
    NoSQLTableCell *cell = [tableView cellForRowAtIndexPath:indexPath];
    [self.activityIndicator startAnimating];

    // Get item
    if (indexPath.section == 0) {
        [self.table getItemWithCompletionHandler:^(id _Nullable response, NSError * _Nullable error) {
            [self.activityIndicator stopAnimating];
            if (error) {
                [self showAlertWithTitle:@"Error"
                                 message:[NSString stringWithFormat:@"Failed to load an item. %@", error.localizedDescription]];
            } else if (!response) {
                [self showAlertWithTitle:@"Not Found"
                                 message:@"No items match your criteria. Insert more sample data and try again."];
            } else {
                [self performSegueWithIdentifier:showQueryResultSeque sender:@[response]];
            }
            [tableView deselectRowAtIndexPath:indexPath animated:YES];
        }];
        return;
    }

    id completionHandler = ^(AWSDynamoDBPaginatedOutput * _Nullable response, NSError * _Nullable error) {
        [self.activityIndicator stopAnimating];
        if (error) {
            NSString *errorMessage = [NSString stringWithFormat:@"Failed to retrieve items. %@", error.localizedDescription];
            if (error.domain == AWSServiceErrorDomain && error.code == AWSServiceErrorAccessDeniedException) {
                errorMessage = @"Access Denied. You are not allowed to perform this operation.";
            }
            [self showAlertWithTitle:@"Error"
                             message:errorMessage];
        } else if ([response.items count] == 0) {
            [self showAlertWithTitle:@"Not Found"
                             message:@"No items match your criteria. Insert more sample data and try again."];
        } else {
            [self performSegueWithIdentifier:showQueryResultSeque sender:response];
        }
        [tableView deselectRowAtIndexPath:indexPath animated:YES];
    };

    // Queries
    if (indexPath.section >= 1
        && indexPath.section < [self.table.indexes count] + 1) {
        Index *index = self.table.indexes[indexPath.section - 1];
        cell.queryType = index.supportedOperations[indexPath.row];

        if ([cell.queryType isEqualToString:QueryWithPartitionKey]) {
            [index queryWithPartitionKeyWithCompletionHandler:completionHandler];
            return;
        }
        if ([cell.queryType isEqualToString:QueryWithPartitionKeyAndFilter]) {
            [index queryWithPartitionKeyAndFilterWithCompletionHandler:completionHandler];
            return;
        }
        if ([cell.queryType isEqualToString:QueryWithPartitionKeyAndSortKey]) {
            [index queryWithPartitionKeyAndSortKeyWithCompletionHandler:completionHandler];
            return;
        }
        if ([cell.queryType isEqualToString:QueryWithPartitionKeyAndSortKeyAndFilter]) {
            [index queryWithPartitionKeyAndSortKeyAndFilterWithCompletionHandler:completionHandler];
            return;
        }
    }

    NSString *scanWarning = @"This operation scans the entire table and should not generally be used in a production app.";
    if (indexPath.row == 0) {
        UIAlertController *alertController = [UIAlertController alertControllerWithTitle:@"WARNING: Scan is Expensive"
                                                                                 message:scanWarning
                                                                          preferredStyle:UIAlertControllerStyleAlert];
        UIAlertAction *dismissAction = [UIAlertAction actionWithTitle:@"OK"
                                                                style:UIAlertActionStyleCancel
                                                              handler:^(UIAlertAction * _Nonnull action) {
                                                                 [self.table scanWithCompletionHandler:completionHandler];
                                                              }];
        [alertController addAction:dismissAction];
        [self presentViewController:alertController
                           animated:YES
                         completion:nil];
    } else if (indexPath.row == 1) {
        UIAlertController *alertController = [UIAlertController alertControllerWithTitle:@"WARNING: Scan is Expensive"
                                                                                 message:scanWarning
                                                                          preferredStyle:UIAlertControllerStyleAlert];
        UIAlertAction *dismissAction = [UIAlertAction actionWithTitle:@"OK"
                                                                style:UIAlertActionStyleCancel
                                                              handler:^(UIAlertAction * _Nonnull action) {
                                                                  [self.table scanWithFilterWithCompletionHandler:completionHandler];
                                                              }];
        [alertController addAction:dismissAction];
        [self presentViewController:alertController
                           animated:YES
                         completion:nil];
    }
}

#pragma mark - Navigation

- (void)prepareForSegue:(UIStoryboardSegue *)segue sender:(id)sender {
    NSIndexPath *indexPath = [self.tableView indexPathForSelectedRow];
    NoSQLTableCell *cell = [self.tableView cellForRowAtIndexPath:indexPath];

    if ([segue.destinationViewController isKindOfClass:[NoSQLQueryResultViewController class]]) {
        NoSQLQueryResultViewController *queryResultViewController = segue.destinationViewController;
        queryResultViewController.queryType = cell.queryTypeLabel.text;
        queryResultViewController.queryDescription = cell.queryDescriptionLabel.text;
        queryResultViewController.table = self.table;
        if ([sender isKindOfClass:[AWSDynamoDBPaginatedOutput class]]) {
            AWSDynamoDBPaginatedOutput *paginatedOutput = (AWSDynamoDBPaginatedOutput *)sender;
            queryResultViewController.results = paginatedOutput.items;
            queryResultViewController.paginatedOutput = paginatedOutput;
        } else {
            queryResultViewController.results = sender;
        }
    }
}

#pragma mark - User action methods

- (IBAction)insertSampleData:(id)sender {
    [self.activityIndicator startAnimating];
    [self.table insertSampleDataWithCompletionHandler:^(NSArray<NSError *> * _Nullable errors) {
        [self.activityIndicator stopAnimating];
        NSString *message = @"20 sample items were added to your table.";
        if (errors) {
            message = @"Failed to insert sample items to your table.";
        }
        UIAlertController *alartController = [UIAlertController alertControllerWithTitle:nil
                                                                                 message:message
                                                                          preferredStyle:UIAlertControllerStyleAlert];
        UIAlertAction *dismissAction = [UIAlertAction actionWithTitle:@"Dismiss"
                                                                style:UIAlertActionStyleCancel
                                                              handler:nil];

        [alartController addAction:dismissAction];

        [self presentViewController:alartController
                           animated:YES
                         completion:nil];
    }];
}

- (IBAction)confirmSampleDataRemoval:(id)sender {
    UIAlertController *alartController = [UIAlertController alertControllerWithTitle:@"Confirm Deletion"
                                                                             message:@"This will remove all sample data from your table. Do you want to continue?"
                                                                      preferredStyle:UIAlertControllerStyleAlert];
    UIAlertAction *proceedAction = [UIAlertAction actionWithTitle:@"Yes"
                                                            style:UIAlertActionStyleDefault
                                                          handler:^(UIAlertAction * _Nonnull action) {
                                                              [self removeSampleData];
                                                          }];
    UIAlertAction *cancelAction = [UIAlertAction actionWithTitle:@"No"
                                                           style:UIAlertActionStyleCancel
                                                         handler:nil];

    [alartController addAction:proceedAction];
    [alartController addAction:cancelAction];

    [self presentViewController:alartController
                       animated:YES
                     completion:nil];
}

- (void)removeSampleData {
    [self.activityIndicator startAnimating];
    [self.table removeSampleDataWithCompletionHandler:^(NSArray<NSError *> * _Nullable errors) {
        [self.activityIndicator stopAnimating];
        NSString *message = @"All sample items were successfully removed from your table.";
        if (errors) {
            message = @"Failed to remove sample items from your table.";
        }
        UIAlertController *alartController = [UIAlertController alertControllerWithTitle:nil
                                                                                 message:message
                                                                          preferredStyle:UIAlertControllerStyleAlert];
        UIAlertAction *dismissAction = [UIAlertAction actionWithTitle:@"Dismiss"
                                                                style:UIAlertActionStyleCancel
                                                              handler:nil];

        [alartController addAction:dismissAction];

        [self presentViewController:alartController
                           animated:YES
                         completion:nil];
    }];
}

#pragma mark - Utility methods

- (void)showAlertWithTitle:(NSString *)title
                   message:(NSString *)message {
    UIAlertController *alertController =
    [UIAlertController alertControllerWithTitle:title
                                        message:message
                                 preferredStyle:UIAlertControllerStyleAlert];
    UIAlertAction *cancelAction =
    [UIAlertAction actionWithTitle:@"OK"
                             style:UIAlertActionStyleDefault
                           handler:nil];
    [alertController addAction:cancelAction];

    [self presentViewController:alertController
                       animated:YES
                     completion:nil];
}

@end

@implementation NoSQLTableCell

@end
